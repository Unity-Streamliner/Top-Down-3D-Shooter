//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/WeaponActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WeaponActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WeaponActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WeaponActions"",
    ""maps"": [
        {
            ""name"": ""Weapon"",
            ""id"": ""42ab23c4-d3d2-4170-8c5a-6377714f868a"",
            ""actions"": [
                {
                    ""name"": ""Pistol"",
                    ""type"": ""Button"",
                    ""id"": ""234ef793-58e2-4de8-a05b-fbf1edd313fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Revolver"",
                    ""type"": ""Button"",
                    ""id"": ""4162d992-25a6-4341-8f65-a440a6153d1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rifle"",
                    ""type"": ""Button"",
                    ""id"": ""77a09110-2636-444c-a4f4-e036f7ebbd99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shotgun"",
                    ""type"": ""Button"",
                    ""id"": ""64318590-d3e4-4741-ba23-221a316c0615"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sniper"",
                    ""type"": ""Button"",
                    ""id"": ""8d23d01a-9cda-4289-b74c-3473af1c4fa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd0b1a46-bf88-4fa7-8691-b8b9d7c54769"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pistol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ba55391-e75b-4ff9-8e01-53c103e60e1d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Revolver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71e39af8-fe48-4120-97c0-d0653df3dc0b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rifle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""525f6abf-9066-4b2c-b78b-c547c51269ae"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shotgun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""665d6e71-f340-410a-bb7f-b5a7972350a8"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sniper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Weapon
        m_Weapon = asset.FindActionMap("Weapon", throwIfNotFound: true);
        m_Weapon_Pistol = m_Weapon.FindAction("Pistol", throwIfNotFound: true);
        m_Weapon_Revolver = m_Weapon.FindAction("Revolver", throwIfNotFound: true);
        m_Weapon_Rifle = m_Weapon.FindAction("Rifle", throwIfNotFound: true);
        m_Weapon_Shotgun = m_Weapon.FindAction("Shotgun", throwIfNotFound: true);
        m_Weapon_Sniper = m_Weapon.FindAction("Sniper", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Weapon
    private readonly InputActionMap m_Weapon;
    private List<IWeaponActions> m_WeaponActionsCallbackInterfaces = new List<IWeaponActions>();
    private readonly InputAction m_Weapon_Pistol;
    private readonly InputAction m_Weapon_Revolver;
    private readonly InputAction m_Weapon_Rifle;
    private readonly InputAction m_Weapon_Shotgun;
    private readonly InputAction m_Weapon_Sniper;
    public struct WeaponActionsActions
    {
        private @WeaponActions m_Wrapper;
        public WeaponActionsActions(@WeaponActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pistol => m_Wrapper.m_Weapon_Pistol;
        public InputAction @Revolver => m_Wrapper.m_Weapon_Revolver;
        public InputAction @Rifle => m_Wrapper.m_Weapon_Rifle;
        public InputAction @Shotgun => m_Wrapper.m_Weapon_Shotgun;
        public InputAction @Sniper => m_Wrapper.m_Weapon_Sniper;
        public InputActionMap Get() { return m_Wrapper.m_Weapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponActionsActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Add(instance);
            @Pistol.started += instance.OnPistol;
            @Pistol.performed += instance.OnPistol;
            @Pistol.canceled += instance.OnPistol;
            @Revolver.started += instance.OnRevolver;
            @Revolver.performed += instance.OnRevolver;
            @Revolver.canceled += instance.OnRevolver;
            @Rifle.started += instance.OnRifle;
            @Rifle.performed += instance.OnRifle;
            @Rifle.canceled += instance.OnRifle;
            @Shotgun.started += instance.OnShotgun;
            @Shotgun.performed += instance.OnShotgun;
            @Shotgun.canceled += instance.OnShotgun;
            @Sniper.started += instance.OnSniper;
            @Sniper.performed += instance.OnSniper;
            @Sniper.canceled += instance.OnSniper;
        }

        private void UnregisterCallbacks(IWeaponActions instance)
        {
            @Pistol.started -= instance.OnPistol;
            @Pistol.performed -= instance.OnPistol;
            @Pistol.canceled -= instance.OnPistol;
            @Revolver.started -= instance.OnRevolver;
            @Revolver.performed -= instance.OnRevolver;
            @Revolver.canceled -= instance.OnRevolver;
            @Rifle.started -= instance.OnRifle;
            @Rifle.performed -= instance.OnRifle;
            @Rifle.canceled -= instance.OnRifle;
            @Shotgun.started -= instance.OnShotgun;
            @Shotgun.performed -= instance.OnShotgun;
            @Shotgun.canceled -= instance.OnShotgun;
            @Sniper.started -= instance.OnSniper;
            @Sniper.performed -= instance.OnSniper;
            @Sniper.canceled -= instance.OnSniper;
        }

        public void RemoveCallbacks(IWeaponActions instance)
        {
            if (m_Wrapper.m_WeaponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponActionsActions @Weapon => new WeaponActionsActions(this);
    public interface IWeaponActions
    {
        void OnPistol(InputAction.CallbackContext context);
        void OnRevolver(InputAction.CallbackContext context);
        void OnRifle(InputAction.CallbackContext context);
        void OnShotgun(InputAction.CallbackContext context);
        void OnSniper(InputAction.CallbackContext context);
    }
}
